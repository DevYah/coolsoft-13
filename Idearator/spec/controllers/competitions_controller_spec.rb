require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CompetitionsController do

  # This should return the minimal set of attributes required to create a valid
  # Competition. As you add validations to Competition, be sure to
  # update the return value of this method accordingly.

  include Devise::TestHelpers

  describe 'GET #show' do
    before :each do
      @investor = FactoryGirl.build(:investor)
      @investor.confirm!
      @competition = FactoryGirl.create(:competition)
      @competition.investor_id = @investor.id
      @competition.save
      sign_in @investor
    end

    it 'assigns the requested competition as @competition' do
      get :show, :id => @competition.id
      assigns(:competition).should eq(@competition)
    end

    it 'renders the #show view' do
      get :show, :id => @competition.id
      response.should render_template :show
    end
  end

  describe 'GET #new' do
    before :each do
      @investor = FactoryGirl.build(:investor)
      @investor.confirm!
      sign_in @investor
    end

    it 'assigns a new competition to @competition' do
      get :new
      assigns(:competition).should be_a_new(Competition)
    end

    it 'renders the #new view' do
      get :new, :format => 'html'
      response.should render_template 'new'
    end

  end



  describe 'POST #create' do

    it 'creates a new Competition' do
      @competition = FactoryGirl.create(:competition)
      post :create, :competition => FactoryGirl.attributes_for(:competition)
      Competition.last.should eq(@competition)
    end
  end

  describe "DELETE destroy" do
    before :each do
      @investor = FactoryGirl.build(:investor)
      @investor.confirm!
      @competition = FactoryGirl.create(:competition)
      @competition.investor_id = @investor.id
      @competition.save
      sign_in @investor
    end
    it "destroys the requested competition" do
      #competition = Competition.create
      expect {
      delete :destroy, :id => @competition.id}.to change(Competition, :count).by(-1)
    end

    it "redirects to the home page" do
      #competition = Competition.create
      delete :destroy, :id => @competition.id
      response.should redirect_to('/')
    end
  end

end
